<%-
  path = build_link_path(schema, link)
  response_example = link['response_example']
  link_schema_properties_template = Prmd::Template.load_template('link_schema_properties.md.erb', options[:template])

  Prmd::Template::render(File.join('schemata', 'helper.erb'), options[:template], {
    options:         options,
    resource:        resource,
    schema:          schema,
    schemata:        schemata
  })

-%>
### <%= title %> <%= link['title'] %>
<%= link['description'] %>

```
<%= link['method'] %> <%= path %>
```

<%- if link.has_key?('schema') %>
<%- link_schema = (schema.dereference(link['schema']))[1] %>

<%- if link_schema['properties'] && !link_schema['properties'].empty? %>
  <%-
    required = link_schema['required']
    attributes = extract_attributes(schema, link_schema['properties'])
  %>
<%- end %>
<%- if link_schema.has_key?('allOf') %>
  <%-
    required = extract_allOf_required(schema, link_schema['allOf'], '')
    attributes = extract_allOf_attributes(schema, link_schema['allOf'])
  %>
<%- end %>
<%- unless !attributes || attributes.empty? %>
<%- required ||= [] %>
#### Request Attributes
| Name | Type | Description | Example |
| ------- | ------- | ------- | ------- |
  <%- attributes.each do |(key, type, description, example)| %>
| <%- if required.include?(key) %>**<%- end %><%= key %><%- if required.include?(key) %>***<%- end %> | *<%= type %>* | <%= description %> | <%= example %> |
<%- end %>
<%- end %>
<%- end %>

#### Curl Example
<%=
  curl_options = options.dup
  http_header = link['http_header'] || {}
  curl_options[:http_header] = curl_options[:http_header].merge(http_header)
  Prmd::Template.render('schemata/link_curl_example.md.erb', File.dirname(options[:template]), {
    options:         curl_options,
    resource:        resource,
    schema:          schema,
    schemata:        schemata,
    link:            link,
    path:            path
  })
%>

<%- if link.has_key?('targetSchema') && link['targetSchema'].has_key?('properties') %>
  <%-
    response_required = link['required']
    response_attributes = extract_attributes(schema, link['targetSchema']['properties'])
  %>
<%- if link['targetSchema']['allOf'] %>
  <%-
    response_required = extract_allOf_required(schema, link['targetSchema']['allOf'], '')
    response_attributes = extract_allOf_attributes(schema, link['targetSchema']['allOf'])
  %>
<%- end %>
<%- end %>
<%- unless !response_attributes || response_attributes.empty? %>
#### Response Attributes
| Name | Type | Description | Example |
| ------- | ------- | ------- | ------- |
  <%- response_attributes.each do |(key, type, description, example)| %>
| <%- if response_required && response_required.include?(key) %>**<%- end %><%= key %><%- if response_required && response_required.include?(key) %>***<%- end %> | *<%= type %>* | <%= description %> | <%= example %> |
  <%- end %>
<%- end %>
#### Response Example
```
<%- if response_example %>
<%=   response_example['head'] %>
<%- else %>
HTTP/1.1 <%=
  case link['rel']
  when 'create'
    '201 Created'
  when 'empty'
    '202 Accepted'
  else
    '200 OK'
  end %>
<%- end %>
```
```json
<%- if response_example %>
<%=   response_example['body'] %>
<%- else %>
<%-   if link['rel'] == 'empty' %>
<%-   elsif link.has_key?('targetSchema') %>
<%=     JSON.pretty_generate(schema.schema_example(link['targetSchema'])) %>
<%-   elsif link['rel'] == 'instances' %>
<%=     JSON.pretty_generate([schema.schemata_example(resource)]) %>
<%-   else %>
<%=     JSON.pretty_generate(schema.schemata_example(resource)) %>
<%-   end %>
<%- end %>
```
